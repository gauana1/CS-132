func Main()
t2 = @f
t3 = call t2()
print (t3)
v1 = t3
return v1
func f()
stack_s5 = s5
stack_s5 = s5
stack_s3 = s3
stack_s9 = s9
stack_s7 = s7
stack_s7 = s7
stack_s8 = s8
stack_s10 = s10
stack_s2 = s2
stack_s4 = s4
stack_s3 = s3
stack_s1 = s1
stack_s8 = s8
stack_s9 = s9
stack_s3 = s3
stack_s8 = s8
stack_s1 = s1
stack_s7 = s7
stack_s4 = s4
stack_s11 = s11
stack_s6 = s6
stack_s7 = s7
stack_s4 = s4
stack_s1 = s1
stack_s1 = s1
stack_s11 = s11
stack_s11 = s11
stack_s5 = s5
t2 = 10
t3 = 20
t4 = t2 + t3
t5 = 30
s1 = t2 < t5
if0 s1 goto L8
s2 = t2 + t4
s3 = t2 + t3
goto L10
L8:
s4 = t3 + t4
goto L14
L10:
s5 = 50
t3 = s2 + s5
s6 = t4 + s2
s7 = s6 + s3
print (s7)
s4 = t4 + s3
s8 = 40
t3 = t3 + s8
goto L8
L14:
s9 = 10
s3 = t2 + s9
L22:
t3 = 55
s10 = 20
t4 = t2 - s10
s11 = t3 < t4
if0 s11 goto L20
s2 = t4 + t3
s4 = s2 - s9
s1 = s2 + s4
print (s1)
t3 = t4 + s4
s5 = 2
s3 = s5 - t3
goto L22
L20:
t2 = 7
t3 = s3 + t2
t4 = t4 + t3
s5 = 2
s4 = s5 * t4
t2 = s3 + s9
s7 = 55
s8 = s7
s11 = @func_g
t5 = t2 < s8
if0 t5 goto L27
t5 = t2 - s10
stack_t4 = t4
stack_t2 = t2
stack_t5 = t5
stack_a9 = t5
stack_a6 = a6
a6 = s3
stack_a5 = a5
a5 = s4
stack_a7 = a7
a7 = t2
stack_a2 = a2
a2 = t3
stack_a4 = a4
a4 = s2
stack_a3 = a3
a3 = t4
h = s8
i = t5
s8 = call s11( h i)
a2 = stack_a2
a3 = stack_a3
a4 = stack_a4
a5 = stack_a5
a6 = stack_a6
a7 = stack_a7
t5 = stack_a9
t4 = stack_t4
t2 = stack_t2
t5 = stack_t5
t3 = t5 + s8
goto L29
L27:
s1 = 1
s9 = t2 + s1
t3 = s5 * s9
L29:
s7 = 5
s3 = t3 - s7
s9 = t2 + s3
s4 = t3 - s9
s11 = s4 + s3
print (s11)
t5 = t3 + s9
t4 = t4 + s2
t3 = s2 + s10
s8 = t5 + t3
s6 = s2 < s8
L3:
if0 s6 goto L12
s1 = s2 + t3
s5 = 30
s7 = s1 + s5
s7 = t5 - s7
s8 = s1 - s7
s3 = 0
s6 = s8 * s3
t3 = t4 + t2
s8 = s1 + s8
s4 = t3 - s8
print (s4)
goto L3
L12:
t2 = s9 - s8
t2 = s1 + t2
g = t2
s5 = stack_s5
s5 = stack_s5
s3 = stack_s3
s9 = stack_s9
s7 = stack_s7
s7 = stack_s7
s8 = stack_s8
s10 = stack_s10
s2 = stack_s2
s4 = stack_s4
s3 = stack_s3
s1 = stack_s1
s8 = stack_s8
s9 = stack_s9
s3 = stack_s3
s8 = stack_s8
s1 = stack_s1
s7 = stack_s7
s4 = stack_s4
s11 = stack_s11
s6 = stack_s6
s7 = stack_s7
s4 = stack_s4
s1 = stack_s1
s1 = stack_s1
s11 = stack_s11
s11 = stack_s11
s5 = stack_s5
return g
func func_g(x7 x8)
s4 = x7
t2 = x8
stack_s5 = s5
stack_s6 = s6
stack_s7 = s7
stack_s9 = s9
stack_s8 = s8
stack_s10 = s10
stack_s4 = s4
s5 = a2 + a3
s6 = a4 + a5
t5 = a6 + a7
s7 = s4 + t2
s8 = 10
s9 = s8
s10 = t2 < a2
if0 s10 goto L42
t2 = @func_g
stack_t5 = t5
stack_a8 = a3
stack_a5 = a5
a5 = a6
stack_a7 = a7
a7 = s10
stack_a2 = a2
a2 = s10
stack_a4 = a4
a4 = s10
stack_a3 = a3
a3 = s4
stack_a6 = a6
a6 = s8
stack_a9 = s8
ten = s8
s5 = call t2( stack_a8 ten)
a2 = stack_a2
a3 = stack_a3
a4 = stack_a4
a5 = stack_a5
a6 = stack_a6
a7 = stack_a7
a3 = stack_a8
s8 = stack_a9
t5 = stack_t5
L42:
s9 = s7 - s5
t3 = s6 * s9
t4 = t5 - t3
t2 = s7 + s9
t5 = s9 + t3
t3 = t4 + t2
j = t3
s5 = stack_s5
s6 = stack_s6
s7 = stack_s7
s9 = stack_s9
s8 = stack_s8
s10 = stack_s10
s4 = stack_s4
return j
